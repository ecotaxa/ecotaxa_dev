# coding: utf-8

"""
    EcoTaxa

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from to_back.ecotaxa_cli_py.configuration import Configuration


class EMLMethod(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'method_step': 'str',
        'sampling': 'str',
        'study_extent': 'str',
        'sampling_description': 'str'
    }

    attribute_map = {
        'method_step': 'methodStep',
        'sampling': 'sampling',
        'study_extent': 'studyExtent',
        'sampling_description': 'samplingDescription'
    }

    def __init__(self, method_step=None, sampling=None, study_extent=None, sampling_description=None, local_vars_configuration=None):  # noqa: E501
        """EMLMethod - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._method_step = None
        self._sampling = None
        self._study_extent = None
        self._sampling_description = None
        self.discriminator = None

        self.method_step = method_step
        self.sampling = sampling
        self.study_extent = study_extent
        self.sampling_description = sampling_description

    @property
    def method_step(self):
        """Gets the method_step of this EMLMethod.  # noqa: E501


        :return: The method_step of this EMLMethod.  # noqa: E501
        :rtype: str
        """
        return self._method_step

    @method_step.setter
    def method_step(self, method_step):
        """Sets the method_step of this EMLMethod.


        :param method_step: The method_step of this EMLMethod.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and method_step is None:  # noqa: E501
            raise ValueError("Invalid value for `method_step`, must not be `None`")  # noqa: E501

        self._method_step = method_step

    @property
    def sampling(self):
        """Gets the sampling of this EMLMethod.  # noqa: E501


        :return: The sampling of this EMLMethod.  # noqa: E501
        :rtype: str
        """
        return self._sampling

    @sampling.setter
    def sampling(self, sampling):
        """Sets the sampling of this EMLMethod.


        :param sampling: The sampling of this EMLMethod.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and sampling is None:  # noqa: E501
            raise ValueError("Invalid value for `sampling`, must not be `None`")  # noqa: E501

        self._sampling = sampling

    @property
    def study_extent(self):
        """Gets the study_extent of this EMLMethod.  # noqa: E501


        :return: The study_extent of this EMLMethod.  # noqa: E501
        :rtype: str
        """
        return self._study_extent

    @study_extent.setter
    def study_extent(self, study_extent):
        """Sets the study_extent of this EMLMethod.


        :param study_extent: The study_extent of this EMLMethod.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and study_extent is None:  # noqa: E501
            raise ValueError("Invalid value for `study_extent`, must not be `None`")  # noqa: E501

        self._study_extent = study_extent

    @property
    def sampling_description(self):
        """Gets the sampling_description of this EMLMethod.  # noqa: E501


        :return: The sampling_description of this EMLMethod.  # noqa: E501
        :rtype: str
        """
        return self._sampling_description

    @sampling_description.setter
    def sampling_description(self, sampling_description):
        """Sets the sampling_description of this EMLMethod.


        :param sampling_description: The sampling_description of this EMLMethod.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and sampling_description is None:  # noqa: E501
            raise ValueError("Invalid value for `sampling_description`, must not be `None`")  # noqa: E501

        self._sampling_description = sampling_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EMLMethod):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EMLMethod):
            return True

        return self.to_dict() != other.to_dict()
