# coding: utf-8

"""
    EcoTaxa

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from to_back.ecotaxa_cli_py.configuration import Configuration


class EMLAdditionalMeta(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'date_stamp': 'str',
        'metadata_language': 'str',
        'citation': 'str',
        'bibliography': 'str',
        'resource_logo_url': 'str',
        'parent_collection_identifier': 'str',
        'collection_identifier': 'str',
        'formation_period': 'str',
        'living_time_period': 'str',
        'specimen_preservation_method': 'str'
    }

    attribute_map = {
        'date_stamp': 'dateStamp',
        'metadata_language': 'metadataLanguage',
        'citation': 'citation',
        'bibliography': 'bibliography',
        'resource_logo_url': 'resourceLogoUrl',
        'parent_collection_identifier': 'parentCollectionIdentifier',
        'collection_identifier': 'collectionIdentifier',
        'formation_period': 'formationPeriod',
        'living_time_period': 'livingTimePeriod',
        'specimen_preservation_method': 'specimenPreservationMethod'
    }

    def __init__(self, date_stamp=None, metadata_language='eng', citation=None, bibliography=None, resource_logo_url=None, parent_collection_identifier=None, collection_identifier=None, formation_period=None, living_time_period=None, specimen_preservation_method=None, local_vars_configuration=None):  # noqa: E501
        """EMLAdditionalMeta - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._date_stamp = None
        self._metadata_language = None
        self._citation = None
        self._bibliography = None
        self._resource_logo_url = None
        self._parent_collection_identifier = None
        self._collection_identifier = None
        self._formation_period = None
        self._living_time_period = None
        self._specimen_preservation_method = None
        self.discriminator = None

        self.date_stamp = date_stamp
        if metadata_language is not None:
            self.metadata_language = metadata_language
        if citation is not None:
            self.citation = citation
        if bibliography is not None:
            self.bibliography = bibliography
        if resource_logo_url is not None:
            self.resource_logo_url = resource_logo_url
        if parent_collection_identifier is not None:
            self.parent_collection_identifier = parent_collection_identifier
        if collection_identifier is not None:
            self.collection_identifier = collection_identifier
        if formation_period is not None:
            self.formation_period = formation_period
        if living_time_period is not None:
            self.living_time_period = living_time_period
        if specimen_preservation_method is not None:
            self.specimen_preservation_method = specimen_preservation_method

    @property
    def date_stamp(self):
        """Gets the date_stamp of this EMLAdditionalMeta.  # noqa: E501


        :return: The date_stamp of this EMLAdditionalMeta.  # noqa: E501
        :rtype: str
        """
        return self._date_stamp

    @date_stamp.setter
    def date_stamp(self, date_stamp):
        """Sets the date_stamp of this EMLAdditionalMeta.


        :param date_stamp: The date_stamp of this EMLAdditionalMeta.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and date_stamp is None:  # noqa: E501
            raise ValueError("Invalid value for `date_stamp`, must not be `None`")  # noqa: E501

        self._date_stamp = date_stamp

    @property
    def metadata_language(self):
        """Gets the metadata_language of this EMLAdditionalMeta.  # noqa: E501


        :return: The metadata_language of this EMLAdditionalMeta.  # noqa: E501
        :rtype: str
        """
        return self._metadata_language

    @metadata_language.setter
    def metadata_language(self, metadata_language):
        """Sets the metadata_language of this EMLAdditionalMeta.


        :param metadata_language: The metadata_language of this EMLAdditionalMeta.  # noqa: E501
        :type: str
        """

        self._metadata_language = metadata_language

    @property
    def citation(self):
        """Gets the citation of this EMLAdditionalMeta.  # noqa: E501


        :return: The citation of this EMLAdditionalMeta.  # noqa: E501
        :rtype: str
        """
        return self._citation

    @citation.setter
    def citation(self, citation):
        """Sets the citation of this EMLAdditionalMeta.


        :param citation: The citation of this EMLAdditionalMeta.  # noqa: E501
        :type: str
        """

        self._citation = citation

    @property
    def bibliography(self):
        """Gets the bibliography of this EMLAdditionalMeta.  # noqa: E501


        :return: The bibliography of this EMLAdditionalMeta.  # noqa: E501
        :rtype: str
        """
        return self._bibliography

    @bibliography.setter
    def bibliography(self, bibliography):
        """Sets the bibliography of this EMLAdditionalMeta.


        :param bibliography: The bibliography of this EMLAdditionalMeta.  # noqa: E501
        :type: str
        """

        self._bibliography = bibliography

    @property
    def resource_logo_url(self):
        """Gets the resource_logo_url of this EMLAdditionalMeta.  # noqa: E501


        :return: The resource_logo_url of this EMLAdditionalMeta.  # noqa: E501
        :rtype: str
        """
        return self._resource_logo_url

    @resource_logo_url.setter
    def resource_logo_url(self, resource_logo_url):
        """Sets the resource_logo_url of this EMLAdditionalMeta.


        :param resource_logo_url: The resource_logo_url of this EMLAdditionalMeta.  # noqa: E501
        :type: str
        """

        self._resource_logo_url = resource_logo_url

    @property
    def parent_collection_identifier(self):
        """Gets the parent_collection_identifier of this EMLAdditionalMeta.  # noqa: E501


        :return: The parent_collection_identifier of this EMLAdditionalMeta.  # noqa: E501
        :rtype: str
        """
        return self._parent_collection_identifier

    @parent_collection_identifier.setter
    def parent_collection_identifier(self, parent_collection_identifier):
        """Sets the parent_collection_identifier of this EMLAdditionalMeta.


        :param parent_collection_identifier: The parent_collection_identifier of this EMLAdditionalMeta.  # noqa: E501
        :type: str
        """

        self._parent_collection_identifier = parent_collection_identifier

    @property
    def collection_identifier(self):
        """Gets the collection_identifier of this EMLAdditionalMeta.  # noqa: E501


        :return: The collection_identifier of this EMLAdditionalMeta.  # noqa: E501
        :rtype: str
        """
        return self._collection_identifier

    @collection_identifier.setter
    def collection_identifier(self, collection_identifier):
        """Sets the collection_identifier of this EMLAdditionalMeta.


        :param collection_identifier: The collection_identifier of this EMLAdditionalMeta.  # noqa: E501
        :type: str
        """

        self._collection_identifier = collection_identifier

    @property
    def formation_period(self):
        """Gets the formation_period of this EMLAdditionalMeta.  # noqa: E501


        :return: The formation_period of this EMLAdditionalMeta.  # noqa: E501
        :rtype: str
        """
        return self._formation_period

    @formation_period.setter
    def formation_period(self, formation_period):
        """Sets the formation_period of this EMLAdditionalMeta.


        :param formation_period: The formation_period of this EMLAdditionalMeta.  # noqa: E501
        :type: str
        """

        self._formation_period = formation_period

    @property
    def living_time_period(self):
        """Gets the living_time_period of this EMLAdditionalMeta.  # noqa: E501


        :return: The living_time_period of this EMLAdditionalMeta.  # noqa: E501
        :rtype: str
        """
        return self._living_time_period

    @living_time_period.setter
    def living_time_period(self, living_time_period):
        """Sets the living_time_period of this EMLAdditionalMeta.


        :param living_time_period: The living_time_period of this EMLAdditionalMeta.  # noqa: E501
        :type: str
        """

        self._living_time_period = living_time_period

    @property
    def specimen_preservation_method(self):
        """Gets the specimen_preservation_method of this EMLAdditionalMeta.  # noqa: E501


        :return: The specimen_preservation_method of this EMLAdditionalMeta.  # noqa: E501
        :rtype: str
        """
        return self._specimen_preservation_method

    @specimen_preservation_method.setter
    def specimen_preservation_method(self, specimen_preservation_method):
        """Sets the specimen_preservation_method of this EMLAdditionalMeta.


        :param specimen_preservation_method: The specimen_preservation_method of this EMLAdditionalMeta.  # noqa: E501
        :type: str
        """

        self._specimen_preservation_method = specimen_preservation_method

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EMLAdditionalMeta):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EMLAdditionalMeta):
            return True

        return self.to_dict() != other.to_dict()
