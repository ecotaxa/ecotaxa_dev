# coding: utf-8

"""
    EcoTaxa

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from to_back.ecotaxa_cli_py.configuration import Configuration


class ProjectSearchResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'projid': 'int',
        'title': 'str',
        'status': 'str',
        'objcount': 'int',
        'pctvalidated': 'float',
        'pctclassified': 'float',
        'email': 'str',
        'name': 'str',
        'visible': 'bool'
    }

    attribute_map = {
        'projid': 'projid',
        'title': 'title',
        'status': 'status',
        'objcount': 'objcount',
        'pctvalidated': 'pctvalidated',
        'pctclassified': 'pctclassified',
        'email': 'email',
        'name': 'name',
        'visible': 'visible'
    }

    def __init__(self, projid=None, title=None, status=None, objcount=None, pctvalidated=None, pctclassified=None, email=None, name=None, visible=None, local_vars_configuration=None):  # noqa: E501
        """ProjectSearchResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._projid = None
        self._title = None
        self._status = None
        self._objcount = None
        self._pctvalidated = None
        self._pctclassified = None
        self._email = None
        self._name = None
        self._visible = None
        self.discriminator = None

        self.projid = projid
        self.title = title
        self.status = status
        self.objcount = objcount
        self.pctvalidated = pctvalidated
        self.pctclassified = pctclassified
        if email is not None:
            self.email = email
        if name is not None:
            self.name = name
        self.visible = visible

    @property
    def projid(self):
        """Gets the projid of this ProjectSearchResult.  # noqa: E501


        :return: The projid of this ProjectSearchResult.  # noqa: E501
        :rtype: int
        """
        return self._projid

    @projid.setter
    def projid(self, projid):
        """Sets the projid of this ProjectSearchResult.


        :param projid: The projid of this ProjectSearchResult.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and projid is None:  # noqa: E501
            raise ValueError("Invalid value for `projid`, must not be `None`")  # noqa: E501

        self._projid = projid

    @property
    def title(self):
        """Gets the title of this ProjectSearchResult.  # noqa: E501


        :return: The title of this ProjectSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ProjectSearchResult.


        :param title: The title of this ProjectSearchResult.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def status(self):
        """Gets the status of this ProjectSearchResult.  # noqa: E501


        :return: The status of this ProjectSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProjectSearchResult.


        :param status: The status of this ProjectSearchResult.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def objcount(self):
        """Gets the objcount of this ProjectSearchResult.  # noqa: E501


        :return: The objcount of this ProjectSearchResult.  # noqa: E501
        :rtype: int
        """
        return self._objcount

    @objcount.setter
    def objcount(self, objcount):
        """Sets the objcount of this ProjectSearchResult.


        :param objcount: The objcount of this ProjectSearchResult.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and objcount is None:  # noqa: E501
            raise ValueError("Invalid value for `objcount`, must not be `None`")  # noqa: E501

        self._objcount = objcount

    @property
    def pctvalidated(self):
        """Gets the pctvalidated of this ProjectSearchResult.  # noqa: E501


        :return: The pctvalidated of this ProjectSearchResult.  # noqa: E501
        :rtype: float
        """
        return self._pctvalidated

    @pctvalidated.setter
    def pctvalidated(self, pctvalidated):
        """Sets the pctvalidated of this ProjectSearchResult.


        :param pctvalidated: The pctvalidated of this ProjectSearchResult.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and pctvalidated is None:  # noqa: E501
            raise ValueError("Invalid value for `pctvalidated`, must not be `None`")  # noqa: E501

        self._pctvalidated = pctvalidated

    @property
    def pctclassified(self):
        """Gets the pctclassified of this ProjectSearchResult.  # noqa: E501


        :return: The pctclassified of this ProjectSearchResult.  # noqa: E501
        :rtype: float
        """
        return self._pctclassified

    @pctclassified.setter
    def pctclassified(self, pctclassified):
        """Sets the pctclassified of this ProjectSearchResult.


        :param pctclassified: The pctclassified of this ProjectSearchResult.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and pctclassified is None:  # noqa: E501
            raise ValueError("Invalid value for `pctclassified`, must not be `None`")  # noqa: E501

        self._pctclassified = pctclassified

    @property
    def email(self):
        """Gets the email of this ProjectSearchResult.  # noqa: E501


        :return: The email of this ProjectSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ProjectSearchResult.


        :param email: The email of this ProjectSearchResult.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this ProjectSearchResult.  # noqa: E501


        :return: The name of this ProjectSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectSearchResult.


        :param name: The name of this ProjectSearchResult.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def visible(self):
        """Gets the visible of this ProjectSearchResult.  # noqa: E501


        :return: The visible of this ProjectSearchResult.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this ProjectSearchResult.


        :param visible: The visible of this ProjectSearchResult.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and visible is None:  # noqa: E501
            raise ValueError("Invalid value for `visible`, must not be `None`")  # noqa: E501

        self._visible = visible

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectSearchResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectSearchResult):
            return True

        return self.to_dict() != other.to_dict()
