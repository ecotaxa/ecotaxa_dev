# coding: utf-8

"""
    EcoTaxa

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from to_back.ecotaxa_cli_py.configuration import Configuration


class EMLTemporalCoverage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'single_date_time': 'str',
        'begin_date': 'str',
        'end_date': 'str'
    }

    attribute_map = {
        'single_date_time': 'singleDateTime',
        'begin_date': 'beginDate',
        'end_date': 'endDate'
    }

    def __init__(self, single_date_time=None, begin_date=None, end_date=None, local_vars_configuration=None):  # noqa: E501
        """EMLTemporalCoverage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._single_date_time = None
        self._begin_date = None
        self._end_date = None
        self.discriminator = None

        if single_date_time is not None:
            self.single_date_time = single_date_time
        if begin_date is not None:
            self.begin_date = begin_date
        if end_date is not None:
            self.end_date = end_date

    @property
    def single_date_time(self):
        """Gets the single_date_time of this EMLTemporalCoverage.  # noqa: E501


        :return: The single_date_time of this EMLTemporalCoverage.  # noqa: E501
        :rtype: str
        """
        return self._single_date_time

    @single_date_time.setter
    def single_date_time(self, single_date_time):
        """Sets the single_date_time of this EMLTemporalCoverage.


        :param single_date_time: The single_date_time of this EMLTemporalCoverage.  # noqa: E501
        :type single_date_time: str
        """

        self._single_date_time = single_date_time

    @property
    def begin_date(self):
        """Gets the begin_date of this EMLTemporalCoverage.  # noqa: E501


        :return: The begin_date of this EMLTemporalCoverage.  # noqa: E501
        :rtype: str
        """
        return self._begin_date

    @begin_date.setter
    def begin_date(self, begin_date):
        """Sets the begin_date of this EMLTemporalCoverage.


        :param begin_date: The begin_date of this EMLTemporalCoverage.  # noqa: E501
        :type begin_date: str
        """

        self._begin_date = begin_date

    @property
    def end_date(self):
        """Gets the end_date of this EMLTemporalCoverage.  # noqa: E501


        :return: The end_date of this EMLTemporalCoverage.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this EMLTemporalCoverage.


        :param end_date: The end_date of this EMLTemporalCoverage.  # noqa: E501
        :type end_date: str
        """

        self._end_date = end_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EMLTemporalCoverage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EMLTemporalCoverage):
            return True

        return self.to_dict() != other.to_dict()
