# coding: utf-8

"""
    EcoTaxa

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from to_back.ecotaxa_cli_py.configuration import Configuration


class EMLProject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'title': 'str',
        'identifier': 'str',
        'personnel': 'list[EMLAssociatedPerson]',
        'description': 'str',
        'funding': 'str',
        'study_area_description': 'str',
        'design_description': 'str',
        'quality_control': 'str'
    }

    attribute_map = {
        'title': 'title',
        'identifier': 'identifier',
        'personnel': 'personnel',
        'description': 'description',
        'funding': 'funding',
        'study_area_description': 'studyAreaDescription',
        'design_description': 'designDescription',
        'quality_control': 'qualityControl'
    }

    def __init__(self, title=None, identifier=None, personnel=None, description=None, funding=None, study_area_description=None, design_description=None, quality_control=None, local_vars_configuration=None):  # noqa: E501
        """EMLProject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._title = None
        self._identifier = None
        self._personnel = None
        self._description = None
        self._funding = None
        self._study_area_description = None
        self._design_description = None
        self._quality_control = None
        self.discriminator = None

        self.title = title
        if identifier is not None:
            self.identifier = identifier
        self.personnel = personnel
        if description is not None:
            self.description = description
        if funding is not None:
            self.funding = funding
        if study_area_description is not None:
            self.study_area_description = study_area_description
        if design_description is not None:
            self.design_description = design_description
        if quality_control is not None:
            self.quality_control = quality_control

    @property
    def title(self):
        """Gets the title of this EMLProject.  # noqa: E501


        :return: The title of this EMLProject.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EMLProject.


        :param title: The title of this EMLProject.  # noqa: E501
        :type title: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def identifier(self):
        """Gets the identifier of this EMLProject.  # noqa: E501


        :return: The identifier of this EMLProject.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this EMLProject.


        :param identifier: The identifier of this EMLProject.  # noqa: E501
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def personnel(self):
        """Gets the personnel of this EMLProject.  # noqa: E501


        :return: The personnel of this EMLProject.  # noqa: E501
        :rtype: list[EMLAssociatedPerson]
        """
        return self._personnel

    @personnel.setter
    def personnel(self, personnel):
        """Sets the personnel of this EMLProject.


        :param personnel: The personnel of this EMLProject.  # noqa: E501
        :type personnel: list[EMLAssociatedPerson]
        """
        if self.local_vars_configuration.client_side_validation and personnel is None:  # noqa: E501
            raise ValueError("Invalid value for `personnel`, must not be `None`")  # noqa: E501

        self._personnel = personnel

    @property
    def description(self):
        """Gets the description of this EMLProject.  # noqa: E501


        :return: The description of this EMLProject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EMLProject.


        :param description: The description of this EMLProject.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def funding(self):
        """Gets the funding of this EMLProject.  # noqa: E501


        :return: The funding of this EMLProject.  # noqa: E501
        :rtype: str
        """
        return self._funding

    @funding.setter
    def funding(self, funding):
        """Sets the funding of this EMLProject.


        :param funding: The funding of this EMLProject.  # noqa: E501
        :type funding: str
        """

        self._funding = funding

    @property
    def study_area_description(self):
        """Gets the study_area_description of this EMLProject.  # noqa: E501


        :return: The study_area_description of this EMLProject.  # noqa: E501
        :rtype: str
        """
        return self._study_area_description

    @study_area_description.setter
    def study_area_description(self, study_area_description):
        """Sets the study_area_description of this EMLProject.


        :param study_area_description: The study_area_description of this EMLProject.  # noqa: E501
        :type study_area_description: str
        """

        self._study_area_description = study_area_description

    @property
    def design_description(self):
        """Gets the design_description of this EMLProject.  # noqa: E501


        :return: The design_description of this EMLProject.  # noqa: E501
        :rtype: str
        """
        return self._design_description

    @design_description.setter
    def design_description(self, design_description):
        """Sets the design_description of this EMLProject.


        :param design_description: The design_description of this EMLProject.  # noqa: E501
        :type design_description: str
        """

        self._design_description = design_description

    @property
    def quality_control(self):
        """Gets the quality_control of this EMLProject.  # noqa: E501


        :return: The quality_control of this EMLProject.  # noqa: E501
        :rtype: str
        """
        return self._quality_control

    @quality_control.setter
    def quality_control(self, quality_control):
        """Sets the quality_control of this EMLProject.


        :param quality_control: The quality_control of this EMLProject.  # noqa: E501
        :type quality_control: str
        """

        self._quality_control = quality_control

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EMLProject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EMLProject):
            return True

        return self.to_dict() != other.to_dict()
